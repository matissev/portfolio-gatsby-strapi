type Categorie {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Nom_FR: String!
  Liste: ENUM_CATEGORIE_LISTE
  Nom_EN: String!
}

type CategorieAggregator {
  count: Int
  totalCount: Int
}

type CategorieConnection {
  values: [Categorie]
  groupBy: CategorieGroupBy
  aggregate: CategorieAggregator
}

type CategorieConnection_id {
  key: ID
  connection: CategorieConnection
}

type CategorieConnectionCreatedAt {
  key: DateTime
  connection: CategorieConnection
}

type CategorieConnectionId {
  key: ID
  connection: CategorieConnection
}

type CategorieConnectionListe {
  key: String
  connection: CategorieConnection
}

type CategorieConnectionNom_EN {
  key: String
  connection: CategorieConnection
}

type CategorieConnectionNom_FR {
  key: String
  connection: CategorieConnection
}

type CategorieConnectionUpdatedAt {
  key: DateTime
  connection: CategorieConnection
}

type CategorieGroupBy {
  _id: [CategorieConnection_id]
  id: [CategorieConnectionId]
  createdAt: [CategorieConnectionCreatedAt]
  updatedAt: [CategorieConnectionUpdatedAt]
  Nom_FR: [CategorieConnectionNom_FR]
  Liste: [CategorieConnectionListe]
  Nom_EN: [CategorieConnectionNom_EN]
}

input CategorieInput {
  Nom_FR: String!
  Liste: ENUM_CATEGORIE_LISTE
  Nom_EN: String!
}

input createCategorieInput {
  data: CategorieInput
}

type createCategoriePayload {
  categorie: Categorie
}

input createPageInput {
  data: PageInput
}

type createPagePayload {
  page: Page
}

input createProjetInput {
  data: ProjetInput
}

type createProjetPayload {
  projet: Projet
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteCategorieInput {
  where: InputID
}

type deleteCategoriePayload {
  categorie: Categorie
}

input deletePageInput {
  where: InputID
}

type deletePagePayload {
  page: Page
}

input deleteProjetInput {
  where: InputID
}

type deleteProjetPayload {
  projet: Projet
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editCategorieInput {
  Nom_FR: String
  Liste: ENUM_CATEGORIE_LISTE
  Nom_EN: String
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editPageInput {
  Texte_Accueil_FR: String
  Image_Accueil: ID
  Texte_A_Propos_FR: String
  Texte_Accueil_EN: String
  Texte_A_Propos_EN: String
  Titre_Img_Accueil_FR: String
  Titre_Img_Accueil_EN: String
  Description_Img_Accueil_FR: String
  Description_Img_Accueil_EN: String
  Description_Site_FR: String
  Description_Site_EN: String
  Lien_Linkedin: String
  Lien_Instagram: String
}

input editProjetInput {
  Titre_FR: String
  Contenu_FR: String
  Image: ID
  Contenu_EN: String
  Titre_EN: String
  Slug_EN: String
  Audio: [ID]
  Soundcloud: String
  categorie: ID
  Annee: Int
  Slug_FR: String
  Description_Img_FR: String
  Description_Img_EN: String
  Titre_Img_FR: String
  Titre_Img_EN: String
  Description_FR: String
  Description_EN: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  ReceivesEmails: Boolean
}

enum ENUM_CATEGORIE_LISTE {
  premiere
  deuxieme
  troisieme
  quatrieme
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Categorie | createCategoriePayload | updateCategoriePayload | deleteCategoriePayload | CategorieConnection | CategorieAggregator | CategorieGroupBy | CategorieConnection_id | CategorieConnectionId | CategorieConnectionCreatedAt | CategorieConnectionUpdatedAt | CategorieConnectionNom_FR | CategorieConnectionListe | CategorieConnectionNom_EN | Page | createPagePayload | updatePagePayload | deletePagePayload | PageConnection | PageAggregator | PageGroupBy | PageConnection_id | PageConnectionId | PageConnectionCreatedAt | PageConnectionUpdatedAt | PageConnectionTexte_Accueil_FR | PageConnectionImage_Accueil | PageConnectionTexte_A_Propos_FR | PageConnectionTexte_Accueil_EN | PageConnectionTexte_A_Propos_EN | PageConnectionTitre_Img_Accueil_FR | PageConnectionTitre_Img_Accueil_EN | PageConnectionDescription_Img_Accueil_FR | PageConnectionDescription_Img_Accueil_EN | PageConnectionDescription_Site_FR | PageConnectionDescription_Site_EN | PageConnectionLien_Linkedin | PageConnectionLien_Instagram | Projet | createProjetPayload | updateProjetPayload | deleteProjetPayload | ProjetConnection | ProjetAggregator | ProjetGroupBy | ProjetConnection_id | ProjetConnectionId | ProjetConnectionCreatedAt | ProjetConnectionUpdatedAt | ProjetConnectionTitre_FR | ProjetConnectionContenu_FR | ProjetConnectionImage | ProjetConnectionContenu_EN | ProjetConnectionTitre_EN | ProjetConnectionSlug_EN | ProjetConnectionSoundcloud | ProjetConnectionCategorie | ProjetConnectionAnnee | ProjetConnectionSlug_FR | ProjetConnectionDescription_Img_FR | ProjetConnectionDescription_Img_EN | ProjetConnectionTitre_Img_FR | ProjetConnectionTitre_Img_EN | ProjetConnectionDescription_FR | ProjetConnectionDescription_EN | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionId | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionReceivesEmails

type Mutation {
  createCategorie(input: createCategorieInput): createCategoriePayload
  updateCategorie(input: updateCategorieInput): updateCategoriePayload
  deleteCategorie(input: deleteCategorieInput): deleteCategoriePayload
  createPage(input: createPageInput): createPagePayload
  updatePage(input: updatePageInput): updatePagePayload
  deletePage(input: deletePageInput): deletePagePayload
  createProjet(input: createProjetInput): createProjetPayload
  updateProjet(input: updateProjetInput): updateProjetPayload
  deleteProjet(input: deleteProjetInput): deleteProjetPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Page {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Texte_Accueil_FR: String
  Image_Accueil: UploadFile
  Texte_A_Propos_FR: String
  Texte_Accueil_EN: String
  Texte_A_Propos_EN: String
  Titre_Img_Accueil_FR: String!
  Titre_Img_Accueil_EN: String!
  Description_Img_Accueil_FR: String!
  Description_Img_Accueil_EN: String!
  Description_Site_FR: String!
  Description_Site_EN: String!
  Lien_Linkedin: String
  Lien_Instagram: String
}

type PageAggregator {
  count: Int
  totalCount: Int
}

type PageConnection {
  values: [Page]
  groupBy: PageGroupBy
  aggregate: PageAggregator
}

type PageConnection_id {
  key: ID
  connection: PageConnection
}

type PageConnectionCreatedAt {
  key: DateTime
  connection: PageConnection
}

type PageConnectionDescription_Img_Accueil_EN {
  key: String
  connection: PageConnection
}

type PageConnectionDescription_Img_Accueil_FR {
  key: String
  connection: PageConnection
}

type PageConnectionDescription_Site_EN {
  key: String
  connection: PageConnection
}

type PageConnectionDescription_Site_FR {
  key: String
  connection: PageConnection
}

type PageConnectionId {
  key: ID
  connection: PageConnection
}

type PageConnectionImage_Accueil {
  key: ID
  connection: PageConnection
}

type PageConnectionLien_Instagram {
  key: String
  connection: PageConnection
}

type PageConnectionLien_Linkedin {
  key: String
  connection: PageConnection
}

type PageConnectionTexte_A_Propos_EN {
  key: String
  connection: PageConnection
}

type PageConnectionTexte_A_Propos_FR {
  key: String
  connection: PageConnection
}

type PageConnectionTexte_Accueil_EN {
  key: String
  connection: PageConnection
}

type PageConnectionTexte_Accueil_FR {
  key: String
  connection: PageConnection
}

type PageConnectionTitre_Img_Accueil_EN {
  key: String
  connection: PageConnection
}

type PageConnectionTitre_Img_Accueil_FR {
  key: String
  connection: PageConnection
}

type PageConnectionUpdatedAt {
  key: DateTime
  connection: PageConnection
}

type PageGroupBy {
  _id: [PageConnection_id]
  id: [PageConnectionId]
  createdAt: [PageConnectionCreatedAt]
  updatedAt: [PageConnectionUpdatedAt]
  Texte_Accueil_FR: [PageConnectionTexte_Accueil_FR]
  Image_Accueil: [PageConnectionImage_Accueil]
  Texte_A_Propos_FR: [PageConnectionTexte_A_Propos_FR]
  Texte_Accueil_EN: [PageConnectionTexte_Accueil_EN]
  Texte_A_Propos_EN: [PageConnectionTexte_A_Propos_EN]
  Titre_Img_Accueil_FR: [PageConnectionTitre_Img_Accueil_FR]
  Titre_Img_Accueil_EN: [PageConnectionTitre_Img_Accueil_EN]
  Description_Img_Accueil_FR: [PageConnectionDescription_Img_Accueil_FR]
  Description_Img_Accueil_EN: [PageConnectionDescription_Img_Accueil_EN]
  Description_Site_FR: [PageConnectionDescription_Site_FR]
  Description_Site_EN: [PageConnectionDescription_Site_EN]
  Lien_Linkedin: [PageConnectionLien_Linkedin]
  Lien_Instagram: [PageConnectionLien_Instagram]
}

input PageInput {
  Texte_Accueil_FR: String
  Image_Accueil: ID
  Texte_A_Propos_FR: String
  Texte_Accueil_EN: String
  Texte_A_Propos_EN: String
  Titre_Img_Accueil_FR: String!
  Titre_Img_Accueil_EN: String!
  Description_Img_Accueil_FR: String!
  Description_Img_Accueil_EN: String!
  Description_Site_FR: String!
  Description_Site_EN: String!
  Lien_Linkedin: String
  Lien_Instagram: String
}

type Projet {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Titre_FR: String!
  Contenu_FR: String
  Image: UploadFile
  Contenu_EN: String
  Titre_EN: String!
  Slug_EN: String!
  Soundcloud: String
  categorie: Categorie
  Annee: Int!
  Slug_FR: String!
  Description_Img_FR: String!
  Description_Img_EN: String!
  Titre_Img_FR: String!
  Titre_Img_EN: String!
  Description_FR: String!
  Description_EN: String!
  Audio(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type ProjetAggregator {
  count: Int
  totalCount: Int
}

type ProjetConnection {
  values: [Projet]
  groupBy: ProjetGroupBy
  aggregate: ProjetAggregator
}

type ProjetConnection_id {
  key: ID
  connection: ProjetConnection
}

type ProjetConnectionAnnee {
  key: Int
  connection: ProjetConnection
}

type ProjetConnectionCategorie {
  key: ID
  connection: ProjetConnection
}

type ProjetConnectionContenu_EN {
  key: String
  connection: ProjetConnection
}

type ProjetConnectionContenu_FR {
  key: String
  connection: ProjetConnection
}

type ProjetConnectionCreatedAt {
  key: DateTime
  connection: ProjetConnection
}

type ProjetConnectionDescription_EN {
  key: String
  connection: ProjetConnection
}

type ProjetConnectionDescription_FR {
  key: String
  connection: ProjetConnection
}

type ProjetConnectionDescription_Img_EN {
  key: String
  connection: ProjetConnection
}

type ProjetConnectionDescription_Img_FR {
  key: String
  connection: ProjetConnection
}

type ProjetConnectionId {
  key: ID
  connection: ProjetConnection
}

type ProjetConnectionImage {
  key: ID
  connection: ProjetConnection
}

type ProjetConnectionSlug_EN {
  key: String
  connection: ProjetConnection
}

type ProjetConnectionSlug_FR {
  key: String
  connection: ProjetConnection
}

type ProjetConnectionSoundcloud {
  key: String
  connection: ProjetConnection
}

type ProjetConnectionTitre_EN {
  key: String
  connection: ProjetConnection
}

type ProjetConnectionTitre_FR {
  key: String
  connection: ProjetConnection
}

type ProjetConnectionTitre_Img_EN {
  key: String
  connection: ProjetConnection
}

type ProjetConnectionTitre_Img_FR {
  key: String
  connection: ProjetConnection
}

type ProjetConnectionUpdatedAt {
  key: DateTime
  connection: ProjetConnection
}

type ProjetGroupBy {
  _id: [ProjetConnection_id]
  id: [ProjetConnectionId]
  createdAt: [ProjetConnectionCreatedAt]
  updatedAt: [ProjetConnectionUpdatedAt]
  Titre_FR: [ProjetConnectionTitre_FR]
  Contenu_FR: [ProjetConnectionContenu_FR]
  Image: [ProjetConnectionImage]
  Contenu_EN: [ProjetConnectionContenu_EN]
  Titre_EN: [ProjetConnectionTitre_EN]
  Slug_EN: [ProjetConnectionSlug_EN]
  Soundcloud: [ProjetConnectionSoundcloud]
  categorie: [ProjetConnectionCategorie]
  Annee: [ProjetConnectionAnnee]
  Slug_FR: [ProjetConnectionSlug_FR]
  Description_Img_FR: [ProjetConnectionDescription_Img_FR]
  Description_Img_EN: [ProjetConnectionDescription_Img_EN]
  Titre_Img_FR: [ProjetConnectionTitre_Img_FR]
  Titre_Img_EN: [ProjetConnectionTitre_Img_EN]
  Description_FR: [ProjetConnectionDescription_FR]
  Description_EN: [ProjetConnectionDescription_EN]
}

input ProjetInput {
  Titre_FR: String!
  Contenu_FR: String
  Image: ID
  Contenu_EN: String
  Titre_EN: String!
  Slug_EN: String!
  Audio: [ID]
  Soundcloud: String
  categorie: ID
  Annee: Int!
  Slug_FR: String!
  Description_Img_FR: String!
  Description_Img_EN: String!
  Titre_Img_FR: String!
  Titre_Img_EN: String!
  Description_FR: String!
  Description_EN: String!
}

type Query {
  categorie(id: ID!): Categorie
  categories(sort: String, limit: Int, start: Int, where: JSON): [Categorie]
  categoriesConnection(sort: String, limit: Int, start: Int, where: JSON): CategorieConnection
  page(id: ID!): Page
  pages(sort: String, limit: Int, start: Int, where: JSON): [Page]
  pagesConnection(sort: String, limit: Int, start: Int, where: JSON): PageConnection
  projet(id: ID!): Projet
  projets(sort: String, limit: Int, start: Int, where: JSON): [Projet]
  projetsConnection(sort: String, limit: Int, start: Int, where: JSON): ProjetConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateCategorieInput {
  where: InputID
  data: editCategorieInput
}

type updateCategoriePayload {
  categorie: Categorie
}

input updatePageInput {
  where: InputID
  data: editPageInput
}

type updatePagePayload {
  page: Page
}

input updateProjetInput {
  where: InputID
  data: editProjetInput
}

type updateProjetPayload {
  projet: Projet
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  id: [UploadFileConnectionId]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  ReceivesEmails: Boolean
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  ReceivesEmails: Boolean
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionReceivesEmails {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  id: [UsersPermissionsUserConnectionId]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  ReceivesEmails: [UsersPermissionsUserConnectionReceivesEmails]
}
